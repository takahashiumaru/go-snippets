{
  "timeNow": {
    "prefix": "!time",
    "body": "time.Now()",
    "description": "time now"
  },

  "timeNowMonthString": {
    "prefix": "!timeMonthString",
    "body": "time.Now().Format(\"200601\")",
    "description": "time now month"
  },

  "timeNowDateString": {
    "prefix": "!timeDateString",
    "body": "time.Now().Format(\"20060102\")",
    "description": "time now date"
  },

  "convUintToString": {
    "prefix": "!convUintToString",
    "body": "strconv.FormatUint(uint64(?), 10)",
    "description": "convert uint to string"
  },

  "convStringToUint": {
    "prefix": "!convStringToUint",
    "body": [
      "uint, err := strconv.ParseUint(?, 10, 32)",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "convert string to uint"
  },

  "convStringToInt": {
    "prefix": "!convStringToInt",
    "body": [
      "int, err := strconv.Atoi(?)",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "convert string to int"
  },

  "convIntToString": {
    "prefix": "!convIntToString",
    "body": "strconv.FormatInt(int64(?), 10)",
    "description": "convert int to string"
  },

  "convFloatToString": {
    "prefix": "!convFloatToString",
    "body": "strconv.FormatFloat(?, 'f', -1, 64)",
    "description": "convert float to string"
  },

  "convStringToFloat": {
    "prefix": "!convStringToFloat",
    "body": [
      "float, err := strconv.ParseFloat(?, 8)",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "convert string to float"
  },

  "%s": {
    "prefix": "!fmtSring",
    "body": "%s",
    "description": "fmt.Sprintf(\"%d\", \"string\")"
  },

  "%d": {
    "prefix": "!fmtUint",
    "body": "%d",
    "description": "fmt.Sprintf(\"%d\", uint)"
  },

  "%g": {
    "prefix": "!fmtFloat",
    "body": "%g",
    "description": "fmt.Sprintf(\"%g\", float)"
  },

  "filterMapString": {
    "prefix": "!filterMapString",
    "body": ["data := map[string]string{", "\"?.eq\": ?", "}"],
    "description": "filter map"
  },

  "split": {
    "prefix": "!spilt",
    "body": "strings.Split(?, \"?\")",
    "description": "split"
  },

  "timeUnix": {
    "prefix": "!timeUnix",
    "body": "time.Now().Unix()",
    "description": "time unix"
  },

  "switch": {
    "prefix": "!switch",
    "body": ["switch expression {", "\tcase condition:", "\tdefault:", "}"],
    "description": "switch case"
  },

  "constraint": {
    "prefix": "!constraint",
    "body": [
      "if !helper.Contains([]string{?}, ?) {",
      "err := &exception.ErrorSendToResponse{Err: \"Internal Server Error\"}"
    ],
    "description": "check constraint"
  },

  "uniqueStrings": {
    "prefix": "!uniqueStrings",
    "body": [
      "  uniqueSubstrings := make(map[string]bool)",
      "for _, substring := range ? {",
      "uniqueSubstrings[substring] = true",
      "}",

      "unique := []string{}",
      "for k := range uniqueSubstrings {",
      "unique = append(unique, k)",
      "}"
    ],
    "description": "check if string double this function distict data"
  },

  "processData": {
    "prefix": "!processData",
    "body": [
      "temporaryDatas := []?{}",
      "data := ?",
      "for temporaryData := range data {",
      "temporaryDatas = append(temporaryDatas, temporaryData)",
      "}"
    ],
    "description": "check if string double this function distict data"
  },

  "findAll": {
    "prefix": "!findAll",
    "body": [
      "? := ?struct?",
      "tx := db.Model(?struct?).Limit(500)",

      "err := tx.Find(&?).Error",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "query gorm find all data"
  },

  "findByID": {
    "prefix": "!findByID",
    "body": [
      "var ? ?struct?",
      "err := db.First(?, ?).Error",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "query gorm find by ID"
  },

  "create": {
    "prefix": "!create",
    "body": [
      "err := db.Create(?struct?).First(?).Error",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "query gorm create"
  },

  "update": {
    "prefix": "!update",
    "body": [
      "? := ?struct?",

      "err := db.Where(?).Updates(?,id).Error",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "query gorm update"
  },

  "delete": {
    "prefix": "!delete",
    "body": [
      "? := ?struct?",
      "tx := db.First(?, id).Updates(?)",

      "err = tx.Unscoped().Delete(?, id).Error",
      "if err != nil {",
      "panic(err)",
      "}"
    ],
    "description": "query gorm delete"
  }
}
